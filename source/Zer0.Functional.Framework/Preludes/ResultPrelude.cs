using Zer0.Functional.Framework.Functors;
using Zer0.Functional.Framework.Types;
using Zer0.Functional.Framework.ResultExtensions;

namespace Zer0.Functional.Framework.Preludes;

public static class ResultPrelude
{
    /// <summary>
    /// Tries to execute the input <see cref="Func{T}"/>.
    /// If the execution completes without exception, returns a <see cref="Result{T}"/> with the function result as <see cref="Result.Success{T}(T)"/>.
    /// Otherwise returns <see cref="Result.Fail{T}"/> with the <see cref="Error"/> generated by the <paramref name="errorHandler"/> based on the thrown exception.
    /// </summary>
    /// <typeparam name="T">Type of the value in the result.</typeparam>
    /// <param name="func">Function to execute.</param>
    /// <param name="errorHandler">Function that generates error details in case of exception.</param>
    public static Result<T> Try<T>(Func<T> func, Func<Exception, Error> errorHandler)
    {
        try
        {
            T result = func();
            return result;
        }
        catch (Exception ex)
        {
            return errorHandler(ex);
        }
    }

    /// <summary>
    /// Tries to execute the input <see cref="Func{T}"/>.
    /// If the execution completes without exception, returns a <see cref="Result{T}"/> with the function result as <see cref="Result.Success{T}(T)"/>.
    /// Otherwise returns <see cref="Result.Fail{T}"/> with the <see cref="Error"/> generated by the <paramref name="errorHandler"/> based on the thrown exception.
    /// </summary>
    /// <typeparam name="T">Type of the value in the result.</typeparam>
    /// <param name="func">Function to execute.</param>
    /// <param name="errorHandler">Function that generates error details in case of exception.</param>
    public static async Task<Result<T>> TryAsync<T>(Func<Task<T>> func, Func<Exception, Error> errorHandler)
    {
        try
        {
            T result = await func();
            return result;
        }
        catch (Exception ex)
        {
            return errorHandler(ex);
        }
    }
}
