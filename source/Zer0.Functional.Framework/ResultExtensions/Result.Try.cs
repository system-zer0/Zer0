using Zer0.Functional.Framework.Functors;
using Zer0.Functional.Framework.Preludes;
using Zer0.Functional.Framework.Types;

namespace Zer0.Functional.Framework.ResultExtensions;

public static partial class Result
{
    /// <summary>
    /// Tries to execute <paramref name="func"/> with the value from the <paramref name="result"/> as an input.
    /// If the execution completes without exception, returns Ok with the function result.
    /// Otherwise returns Error with details generated by <paramref name="errorHandler"/> based on the thrown exception.
    /// If the <paramref name="result"/> is Error function is not executed and the Error is returned.
    /// </summary>
    /// <typeparam name="TIn">Type of the value in the input result.</typeparam>
    /// <typeparam name="TOut">Type of the value in the output result.</typeparam>
    /// <param name="result">Result to take the value from.</param>
    /// <param name="func">Function to execute.</param>
    /// <param name="errorHandler">Function that generates error details in case of exception.</param>
    public static Result<TOut> Try<TIn, TOut>(
        this Result<TIn> result,
        Func<TIn, TOut> func,
        Func<TIn, Exception, Error> errorHandler)
        => result.Bind(value => ResultPrelude.Try(() => func(value), e => errorHandler(value, e)));

    /// <summary>
    /// Tries to execute <paramref name="func"/> with the value from the <paramref name="result"/> as an input.
    /// If the execution completes without exception, returns Ok with the function result.
    /// Otherwise returns Error with details generated by <paramref name="errorHandler"/> based on the thrown exception.
    /// If the <paramref name="result"/> is Error function is not executed and the Error is returned.
    /// </summary>
    /// <typeparam name="TIn">Type of the value in the input result.</typeparam>
    /// <typeparam name="TOut">Type of the value in the output result.</typeparam>
    /// <param name="result">Result to take the value from.</param>
    /// <param name="func">Function to execute.</param>
    /// <param name="errorHandler">Function that generates error details in case of exception.</param>
    public static async Task<Result<TOut>> TryAsync<TIn, TOut>(this Result<TIn> result, Func<TIn, Task<TOut>> func, Func<TIn, Exception, Error> errorHandler) =>
        await result.BindAsync(value => ResultPrelude.TryAsync(() => func(value), e => errorHandler(value, e)));

}
